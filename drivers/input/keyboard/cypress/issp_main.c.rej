--- drivers/input/keyboard/cypress/issp_main.c
+++ drivers/input/keyboard/cypress/issp_main.c
@@ -16,244 +17,244 @@
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND,EXPRESS OR IMPLIED,
-WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
-Cypress reserves the right to make changes without further notice to the
-materials described herein. Cypress does not assume any liability arising
-out of the application or use of any product or circuit described herein.
-Cypress does not authorize its products for use as critical components in
-life-support systems where a malfunction or failure may reasonably be
-expected to result in significant injury to the user. The inclusion of
-Cypress誰多?product in a life-support systems application implies that the
-manufacturer assumes all risk of such use and in doing so indemnifies
-Cypress against all charges.
-
-Use may be limited by and subject to the applicable Cypress software
-license agreement.
+ Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND,EXPRESS OR IMPLIED,
+ WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
+ Cypress reserves the right to make changes without further notice to the
+ materials described herein. Cypress does not assume any liability arising
+ out of the application or use of any product or circuit described herein.
+ Cypress does not authorize its products for use as critical components in
+ life-support systems where a malfunction or failure may reasonably be
+ expected to result in significant injury to the user. The inclusion of
+ Cypress誰多?product in a life-support systems application implies that the
+ manufacturer assumes all risk of such use and in doing so indemnifies
+ Cypress against all charges.
+
+ Use may be limited by and subject to the applicable Cypress software
+ license agreement.
 
 ---------------------------------------------------------------------------*/
 
 /* ############################################################################
-###################  CRITICAL PROJECT CONSTRAINTS   ########################
-############################################################################
-
-ISSP programming can only occur within a temperature range of 5C to 50C.
-- This project is written without temperature compensation and using
-programming pulse-widths that match those used by programmers such as the
-Mini-Prog and the ISSP Programmer.
-This means that the die temperature of the PSoC device cannot be outside
-of the above temperature range.
-If a wider temperature range is required, contact your Cypress Semi-
-conductor FAE or sales person for assistance.
-
-The project can be configured to program devices at 5V or at 3.3V.
-- Initialization of the device is different for different voltages. The
-initialization is hardcoded and can only be set for one voltage range.
-The supported voltages ranges are 3.3V (3.0V to 3.6V) and 5V (4.75V to
-5.25V). See the device datasheet for more details. If varying voltage
-ranges must be supported, contact your Cypress Semiconductor FAE or sales
-person for assistance.
-- ISSP programming for the 2.7V range (2.7V to 3.0V) is not supported.
-
-This program does not support programming all PSoC Devices
-- It does not support obsoleted PSoC devices. A list of devices that are
-not supported is shown here:
-CY8C22x13 - not supported
-CY8C24x23 - not supported (CY8C24x23A is supported)
-CY8C25x43 - not supported
-CY8C26x43 - not supported
-- It does not suport devices that have not been released for sale at the
-time this version was created. If you need to ISSP program a newly released
-device, please contact Cypress Semiconductor Applications, your FAE or
-sales person for assistance.
-The CY8C20x23 devices are not supported at the time of this release.
-
-############################################################################
-##########################################################################*/
+   ###################  CRITICAL PROJECT CONSTRAINTS   ########################
+   ############################################################################
+
+   ISSP programming can only occur within a temperature range of 5C to 50C.
+   - This project is written without temperature compensation and using
+     programming pulse-widths that match those used by programmers such as the
+     Mini-Prog and the ISSP Programmer.
+     This means that the die temperature of the PSoC device cannot be outside
+     of the above temperature range.
+     If a wider temperature range is required, contact your Cypress Semi-
+     conductor FAE or sales person for assistance.
+
+   The project can be configured to program devices at 5V or at 3.3V.
+   - Initialization of the device is different for different voltages. The
+     initialization is hardcoded and can only be set for one voltage range.
+     The supported voltages ranges are 3.3V (3.0V to 3.6V) and 5V (4.75V to
+     5.25V). See the device datasheet for more details. If varying voltage
+     ranges must be supported, contact your Cypress Semiconductor FAE or sales
+     person for assistance.
+   - ISSP programming for the 2.7V range (2.7V to 3.0V) is not supported.
+
+   This program does not support programming all PSoC Devices
+   - It does not support obsoleted PSoC devices. A list of devices that are
+     not supported is shown here:
+         CY8C22x13 - not supported
+         CY8C24x23 - not supported (CY8C24x23A is supported)
+         CY8C25x43 - not supported
+         CY8C26x43 - not supported
+   - It does not suport devices that have not been released for sale at the
+     time this version was created. If you need to ISSP program a newly released
+     device, please contact Cypress Semiconductor Applications, your FAE or
+     sales person for assistance.
+     The CY8C20x23 devices are not supported at the time of this release.
+
+   ############################################################################
+   ##########################################################################*/
 
 /* This program uses information found in Cypress Semiconductor application
-notes "Programming - In-System Serial Programming Protocol", AN2026.  The
-version of this application note that applies to the specific PSoC that is
-being In-System Serial Programmed should be read and and understood when
-using this program. (http:www.cypress.com)
-
-This project is included with releases of PSoC Programmer software. It is
-important to confirm that the latest revision of this software is used when
-it is used. The revision of this copy can be found in the Project History
-table below.
+// notes "Programming - In-System Serial Programming Protocol", AN2026.  The
+// version of this application note that applies to the specific PSoC that is
+// being In-System Serial Programmed should be read and and understood when
+// using this program. (http://www.cypress.com)
+
+// This project is included with releases of PSoC Programmer software. It is
+// important to confirm that the latest revision of this software is used when
+// it is used. The revision of this copy can be found in the Project History
+// table below.
 */
 
-/*
-PROJECT HISTORY
-date      revision  author  description
---------  --------  ------  -----------------------------------------------
-7/23/08	  3.04		ptj		1. CPU clock speed set to to 12MHz (default) after
-								TSYNC is disabled. Previously, it was being set
-								to 3MHz on accident. This affects the following
-								mnemonics:
-									ID_SETUP_1,
-									VERIFY_SETUP,
-									ERASE,
-									SECURE,
-									CHECKSUM_SETUP,
-									PROGRAM_AND_VERIFY,
-									ID_SETUP_2,
-									SYNC_DISABLE
-
-6/06/08   3.03		ptj		1. The Verify_Setup section can tell when flash
-								is fully protected. bTargetStatus[0] shows a
-								01h when flash is "W" Full Protection
-7/23/08						2. READ-ID-WORD updated to read Revision ID from
-								Accumulator A and X, registers T,F0h and T,F3h
-
-5/30/08   3.02		ptj		1. All vectors work.
-							2. Main function will execute the
-								following programming sequence:
-								. id setup 1
-								. id setup 2
-								. erase
-								. program and verify
-								. verify (although not necessary)
-								. secure flash
-								. read security
-								. checksum
-
-05/28/08  3.01	    ptj		TEST CODE - NOT COMPLETE
-							1. The sequence surrounding PROGRAM-AND-VERIFY was
-							improved and works according to spec.
-							2. The sequence surroudning VERIFY-SETUP was devel-
-							oped and improved.
-							3. TSYNC Enable is used to in a limited way
-							4. Working Vectors: ID-SETUP-1, ID-SETUP-2, ERASE,
-							PROGRAM-AND-VERIFY, SECURE, VERIFY-SETUP,
-							CHECKSUM-SETUP
-							5. Un-tested Vectors: READ-SECURITY
-
-05/23/08  3.00		 ptj	TEST CODE - NOT COMPLETE
-							1. This code is a test platform for the development
-							of the Krypton (cy8c20x66) Programming Sequence.
-							See 001-15870 rev *A. This code works on "rev B"
-							silicon.
-							2. Host is Hydra 29000, Target is Krypton "rev B"
-							3. Added Krypton device support
-							4. TYSNC Enable/Disable is not used.
-							5. Working Vectors: ID-SETUP-1, ID-SETUP-2, ERASE,
-							PROGRAM-AND-VERIFY, SECURE
-							6. Non-working Vectors: CHECKSUM-SETUP
-							7. Un-tested Vectors: READ-SECURITY, VERIFY-SETUP
-							8. Other minor (non-SROM) vectors not listed.
-
-09/23/07  2.11       dkn    1. Added searchable comments for the HSSP app note.
-							2. Added new device vectors.
-							3. Verified write and erase pulsewidths.
-							4. Modified some functions for easier porting to
-							other processors.
-
-09/23/06  2.10       mwl    1. Added #define SECURITY_BYTES_PER_BANK to
-							file issp_defs.h. Modified function
-							fSecureTargetFlashMain() in issp_routines.c
-							to use new #define. Modified function
-							fLoadSecurityData() in issp_driver_routines.c
-							to accept a bank number.  Modified the secure
-							data loop in main.c to program multiple banks.
-
-							2. Created function fAccTargetBankChecksum to
-							read and add the target bank checksum to the
-							referenced accumulator.  This allows the
-							checksum loop in main.c to function at the
-							same level of abstraction as the other
-							programming steps.  Accordingly, modified the
-							checksum loop in main.c.  Deleted previous
-							function fVerifyTargetChecksum().
-
-09/08/06  2.00       mwl    1. Array variable abTargetDataOUT was not
-							getting intialized anywhere and compiled as a
-							one-byte array. Modified issp_driver_routines.c
-							line 44 to initialize with TARGET_DATABUFF_LEN.
-
-							2. Function void LoadProgramData(unsigned char
-							bBlockNum) in issp_driver_routines.c had only
-							one parameter bBlockNum but was being called
-							from function main() with two parameters,
-							LoadProgramData(bBankCounter, (unsigned char)
-							iBlockCounter).  Modified function
-							LoadProgramData() to accept both parameters,
-							and in turn modified InitTargetTestData() to
-							accept and use both as well.
-
-							3. Corrected byte set_bank_number[1]
-							inissp_vectors.h.  Was 0xF2, correct value is
-							0xE2.
-
-							4. Corrected the logic to send the SET_BANK_NUM
-							vectors per the AN2026B flow chart.The previous
-							code version was sending once per block, but
-							should have been once per bank.  Removed the
-							conditionally-compiled bank setting code blocks
-							from the top of fProgramTargetBlock() and
-							fVerifyTargetBlock() int issp_routines.c and
-							created a conditionally-compiled subroutine in
-							that same file called SetBankNumber().  Two
-							conditionally-compiled calls to SetBankNumber()
-							were added to main.c().
-
-							5. Corrected CY8C29x66 NUM_BANKS and
-							BLOCKS_PER_BANK definitions in ISSP_Defs.h.
-							Was 2 and 256 respectively, correct values are
-							4 and 128.
-
-							6. Modified function fVerifyTargetChecksum()
-							in issp_routines.c to read and accumulate multiple
-							banks of checksums as required for targets
-							CY8C24x94 and CY8C29x66.  Would have kept same
-							level of abstraction as other multi-bank functions
-							in main.c, but this implementation impacted the
-							code the least.
-
-							7. Corrected byte checksum_v[26] of
-							CHECKSUM_SETUP_24_29 in issp_vectors.h.  Was 0x02,
-							correct value is  0x04.
-
-06/30/06  1.10       jvy    Added support for 24x94 and 29x66 devices.
-06/09/06  1.00       jvy    Changed CPU Clk to 12MHz (from 24MHz) so the
-							host can run from 3.3V.
-							Simplified init of security data.
-06/05/06  0.06       jvy    Version #ifdef added to each file to make sure
-							all of the file are from the same revision.
-							Added flags to prevent multiple includes of H
-							files.
-							Changed pre-determined data for demo to be
-							unique for each block.
-							Changed block verify to check all blocks after
-							block programming has been completed.
-							Added SetSCLKHiZ to explicitly set the Clk to
-							HighZ before power cycle acquire.
-							Fixed wrong vectors in setting Security.
-							Fixed wrong vectors in Block program.
-							Added support for pods
-06/05/06  0.05       jvy    Comments from code review. First copy checked
-							into perforce.  Code has been updated enough to
-							compile, by implementing some comments and
-							fixing others.
-06/04/06  0.04       jvy    made code more efficient in bReceiveByte(), and
-							SendVector() by re-arranging so that local vars
-							could be eliminated.
-							added defines for the delays used in the code.
-06/02/06  0.03       jvy    added number of Flash block adjustment to
-							programming. added power cycle programming
-							mode support. This is the version initially
-							sent out for peer review.
-06/02/06  0.02       jvy    added framework for multiple chip support from
-							one source code set using compiler directives.
-							added timeout to high-low trasition detection.
-							added multiple error message to allow tracking
-							of failures.
-05/30/06  0.01       jvy    initial version,
-							created from DBD's issp_27xxx_v3 program.
-*/
-
-/*
+/*/////////////////////////////////////////////////////////////////////////////
+//  PROJECT HISTORY
+//  date      revision  author  description
+//  --------  --------  ------  -----------------------------------------------
+//	7/23/08	  3.04		ptj		1. CPU clock speed set to to 12MHz (default) after
+//								   TSYNC is disabled. Previously, it was being set
+//								   to 3MHz on accident. This affects the following
+//								   mnemonics:
+//										ID_SETUP_1,
+//										VERIFY_SETUP,
+//										ERASE,
+//										SECURE,
+//										CHECKSUM_SETUP,
+//										PROGRAM_AND_VERIFY,
+//										ID_SETUP_2,
+//										SYNC_DISABLE
+//
+//	6/06/08   3.03		ptj		1. The Verify_Setup section can tell when flash
+//								   is fully protected. bTargetStatus[0] shows a
+//								   01h when flash is "W" Full Protection
+//	7/23/08						2. READ-ID-WORD updated to read Revision ID from
+//								   Accumulator A and X, registers T,F0h and T,F3h
+//
+//	5/30/08   3.02		ptj		1. All vectors work.
+//								2. Main function will execute the
+//								   following programming sequence:
+//									. id setup 1
+//									. id setup 2
+//									. erase
+//									. program and verify
+//									. verify (although not necessary)
+//									. secure flash
+//									. read security
+//									. checksum
+//
+//	05/28/08  3.01	    ptj		TEST CODE - NOT COMPLETE
+//								1. The sequence surrounding PROGRAM-AND-VERIFY was
+//								   improved and works according to spec.
+//								2. The sequence surroudning VERIFY-SETUP was devel-
+//								   oped and improved.
+//								3. TSYNC Enable is used to in a limited way
+//								4. Working Vectors: ID-SETUP-1, ID-SETUP-2, ERASE,
+//								   PROGRAM-AND-VERIFY, SECURE, VERIFY-SETUP,
+//								   CHECKSUM-SETUP
+//								5. Un-tested Vectors: READ-SECURITY
+//
+//  05/23/08  3.00		 ptj	TEST CODE - NOT COMPLETE
+//								1. This code is a test platform for the development
+//								   of the Krypton (cy8c20x66) Programming Sequence.
+//								   See 001-15870 rev *A. This code works on "rev B"
+//								   silicon.
+//								2. Host is Hydra 29000, Target is Krypton "rev B"
+//								3. Added Krypton device support
+//								4. TYSNC Enable/Disable is not used.
+//								5. Working Vectors: ID-SETUP-1, ID-SETUP-2, ERASE,
+//								   PROGRAM-AND-VERIFY, SECURE
+//								6. Non-working Vectors: CHECKSUM-SETUP
+//								7. Un-tested Vectors: READ-SECURITY, VERIFY-SETUP
+//								8. Other minor (non-SROM) vectors not listed.
+//
+//  09/23/07  2.11       dkn    1. Added searchable comments for the HSSP app note.
+//                              2. Added new device vectors.
+//                              3. Verified write and erase pulsewidths.
+//                              4. Modified some functions for easier porting to
+//                              other processors.
+//
+//  09/23/06  2.10       mwl    1. Added #define SECURITY_BYTES_PER_BANK to
+//                              file issp_defs.h. Modified function
+//                              fSecureTargetFlashMain() in issp_routines.c
+//                              to use new #define. Modified function
+//                              fLoadSecurityData() in issp_driver_routines.c
+//                              to accept a bank number.  Modified the secure
+//                              data loop in main.c to program multiple banks.
+//
+//                              2. Created function fAccTargetBankChecksum to
+//                              read and add the target bank checksum to the
+//                              referenced accumulator.  This allows the
+//                              checksum loop in main.c to function at the
+//                              same level of abstraction as the other
+//                              programming steps.  Accordingly, modified the
+//                              checksum loop in main.c.  Deleted previous
+//                              function fVerifyTargetChecksum().
+//
+//  09/08/06  2.00       mwl    1. Array variable abTargetDataOUT was not
+//                              getting intialized anywhere and compiled as a
+//                              one-byte array. Modified issp_driver_routines.c
+//                              line 44 to initialize with TARGET_DATABUFF_LEN.
+//
+//                              2. Function void LoadProgramData(unsigned char
+//                              bBlockNum) in issp_driver_routines.c had only
+//                              one parameter bBlockNum but was being called
+//                              from function main() with two parameters,
+//                              LoadProgramData(bBankCounter, (unsigned char)
+//                              iBlockCounter).  Modified function
+//                              LoadProgramData() to accept both parameters,
+//                              and in turn modified InitTargetTestData() to
+//                              accept and use both as well.
+//
+//                              3. Corrected byte set_bank_number[1]
+//                              inissp_vectors.h.  Was 0xF2, correct value is
+//                              0xE2.
+//
+//                              4. Corrected the logic to send the SET_BANK_NUM
+//                              vectors per the AN2026B flow chart.The previous
+//                              code version was sending once per block, but
+//                              should have been once per bank.  Removed the
+//                              conditionally-compiled bank setting code blocks
+//                              from the top of fProgramTargetBlock() and
+//                              fVerifyTargetBlock() int issp_routines.c and
+//                              created a conditionally-compiled subroutine in
+//                              that same file called SetBankNumber().  Two
+//                              conditionally-compiled calls to SetBankNumber()
+//                              were added to main.c().
+//
+//                              5. Corrected CY8C29x66 NUM_BANKS and
+//                              BLOCKS_PER_BANK definitions in ISSP_Defs.h.
+//                              Was 2 and 256 respectively, correct values are
+//                              4 and 128.
+//
+//                              6. Modified function fVerifyTargetChecksum()
+//                              in issp_routines.c to read and accumulate multiple
+//                              banks of checksums as required for targets
+//                              CY8C24x94 and CY8C29x66.  Would have kept same
+//                              level of abstraction as other multi-bank functions
+//                              in main.c, but this implementation impacted the
+//                              code the least.
+//
+//                              7. Corrected byte checksum_v[26] of
+//                              CHECKSUM_SETUP_24_29 in issp_vectors.h.  Was 0x02,
+//                              correct value is  0x04.
+//
+//  06/30/06  1.10       jvy    Added support for 24x94 and 29x66 devices.
+//  06/09/06  1.00       jvy    Changed CPU Clk to 12MHz (from 24MHz) so the
+//                              host can run from 3.3V.
+//                              Simplified init of security data.
+//  06/05/06  0.06       jvy    Version #ifdef added to each file to make sure
+//                              all of the file are from the same revision.
+//                              Added flags to prevent multiple includes of H
+//                              files.
+//                              Changed pre-determined data for demo to be
+//                              unique for each block.
+//                              Changed block verify to check all blocks after
+//                              block programming has been completed.
+//                              Added SetSCLKHiZ to explicitly set the Clk to
+//                              HighZ before power cycle acquire.
+//                              Fixed wrong vectors in setting Security.
+//                              Fixed wrong vectors in Block program.
+//                              Added support for pods
+//  06/05/06  0.05       jvy    Comments from code review. First copy checked
+//                              into perforce.  Code has been updated enough to
+//                              compile, by implementing some comments and
+//                              fixing others.
+//  06/04/06  0.04       jvy    made code more efficient in bReceiveByte(), and
+//                              SendVector() by re-arranging so that local vars
+//                              could be eliminated.
+//                              added defines for the delays used in the code.
+//  06/02/06  0.03       jvy    added number of Flash block adjustment to
+//                              programming. added power cycle programming
+//                              mode support. This is the version initially
+//                              sent out for peer review.
+//  06/02/06  0.02       jvy    added framework for multiple chip support from
+//                              one source code set using compiler directives.
+//                              added timeout to high-low trasition detection.
+//                              added multiple error message to allow tracking
+//                              of failures.
+//  05/30/06  0.01       jvy    initial version,
+//                              created from DBD's issp_27xxx_v3 program.
+/////////////////////////////////////////////////////////////////////////////*/
+
+/* (((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))
  PSoC In-System Serial Programming (ISSP) Template
  This PSoC Project is designed to be used as a template for designs that
  require PSoC ISSP Functions.
